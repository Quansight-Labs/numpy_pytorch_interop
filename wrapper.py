"""A thin pytorch / numpy compat layer.

Things imported from here have numpy-compatible signatures but operate on
pytorch tensors.
"""
import numpy as np
import torch

# Things to decide on (punt for now)
#
# 1. What are the defaults for pytorch-specific args not present in numpy signatures?
#    device=..., requires_grad=... etc
# 2. What is the useful action for numpy-specific arguments? e.g. like=... 
# 3. What are the return types of wrapper functions: plain torch.Tensors or
#    wrapper ndarrays.
# 4. Default dtypes: numpy defaults to float64, pytorch defaults to float32
#    Stick to pytorch defaults?
# 5. Masked arrays: ignore for now?

# TODO
# 1. Mapping of the numpy layout ('C', 'K' etc) to torch layout / memory_format.
# 2. np.dtype <-> torch.dtype
# 3. numpy type casting rules (to be cleaned up in numpy: follow old or new)


NoValue = None


def asarray(a, dtype=None, order=None, *, like=None):
    if like is not None:
        raise NotImlementedError
    return torch.asarray(a, dtype, order)


def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None,
             axis=0):
    if axis !=0 or retstep or not endpoint:
        raise NotImplementedError
    # XXX: raises TypeError if start or stop are not scalars
    return torch.linspace(start, stop, num, dtype=dtype)


def empty(shape, dtype=float, order='C', *, like=None):
    if order != 'C' or like is not None:
        raise NotImplementedError
    return torch.empty(shape, dtype=dtype)


def empty_like(prototype, dtype=None, order='K', subok=True, shape=None):
    if order != 'K' or not subok:
        raise NotImplementedError
    result = torch.empty(prototype, dtype=dtype)
    if shape is not None:
        result = result.reshape(shape)
    return result


def prod(a, axis=None, dtype=None, out=None, keepdims=NoValue,
         initial=NoValue, where=NoValue):
    if initial is not None or where is not None:
        raise NotImplementedError
    if axis is None:
        if keepdims is not None:
            raise NotImplementedError
        return torch.prod(a, dtype=dtype, out=out)
    elif is_sequence(axis):
        raise NotImplementedError
    return torch.prod(a, axis=axis, dtype=dtype, keepdims=keepdims, out=out)


def corrcoef(x, y=None, rowvar=True, bias=NoValue, ddof=NoValue, *, dtype=None):
    if bias is not None or ddof is not None:
        # deprecated in NumPy
        raise NotImplementedError
    if rowvar is False:
        x = x.T
    if y is not None:
        raise NotImplementedError
    return torch.corrcoef(x, dtype=dtype)


def concatenate(ar_tuple, axis=0, out=None, dtype=None, casting="same_kind"):
    if casting is not "same_kind":
        raise NotImplementedError   # XXX
    if dtype is not None:
        # XXX: map numpy dtypes
        ar_tuple = tuple(ar.type(dtype) for ar in ar_typle)
    return torch.cat(ar_tuple, axis, out=out)


# mapping from numpy API objects to wrappers from this module
mapping = {
    np.asarray : asarray,
    np.linspace : linspace,
    np.empty : empty,
    np.empty_like : empty_like,
    np.prod : prod,
    np.corrcoef : corrcoef,    # XXX: numpy two-arg version
    np.concatenate: concatenate,
}



class ndarray:
    def __init__(self, *args, **kwds):
        self._tensor = torch.Tensor(*args, **kwds)

    @property
    def shape(self):
        return tuple(self._tensor.size)

    @property
    def size(self):
        return self._tensor.numel()

    @property
    def ndim(self):
        return self._tensor.ndim()


# https://github.com/numpy/numpy/blob/v1.23.0/numpy/distutils/misc_util.py#L497-L504
def is_sequence(seq):
    if is_string(seq):
        return False
    try:
        len(seq)
    except Exception:
        return False
    return True

######################################
# Everything below is autogenerated with
# $ python dump_namespace.py
# and lightly edited manually to be importable. Implemented functions are moved
# above and removed from the list below.
# Not present: scalars, types, dtypes, `np.r_` etc

def arange(start, stop, step, dtype=None, *, like=None):
    raise NotImlementedError

def array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0, like=None):
    raise NotImlementedError

def asanyarray(a, dtype=None, order=None, *, like=None):
    raise NotImlementedError


def ascontiguousarray(a, dtype=None, *, like=None):
    raise NotImlementedError

def asfortranarray(a, dtype=None, *, like=None):
    raise NotImlementedError

def compare_chararrays(a, b, cmp_op, rstrip):
    raise NotImlementedError

def datetime_data(dtype, /):
    raise NotImlementedError


def _fastCopyAndTranspose(a):
    raise NotImlementedError

def frombuffer(buffer, dtype=float, count=-1, offset=0, *, like=None):
    raise NotImlementedError

def fromfile(file, dtype=float, count=-1, sep='', offset=0, *, like=None):
    raise NotImlementedError

def fromiter(iter, dtype, count=-1, *, like=None):
    raise NotImlementedError

def frompyfunc(func, nin, nout, *, identity):
    raise NotImlementedError

def fromstring(string, dtype=float, count=-1, sep='', *, like=None):
    raise NotImlementedError

def geterrobj():
    raise NotImlementedError

def promote_types(type1, type2):
    raise NotImlementedError

def set_numeric_ops(op1, op2, *args, **kwargs):
    raise NotImlementedError

def seterrobj(errobj):
    raise NotImlementedError

def zeros(shape, dtype=float, order='C', *, like=None):
    raise NotImlementedError

def __getattr__(attr):
    raise NotImlementedError

def alen(a):
    raise NotImlementedError

def all(a, axis=None, out=None, keepdims=NoValue, *, where=NoValue):
    raise NotImlementedError

def allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False):
    raise NotImlementedError

def alltrue(*args, **kwargs):
    raise NotImlementedError

def amax(a, axis=None, out=None, keepdims=NoValue, initial=NoValue, where=NoValue):
    raise NotImlementedError

def amin(a, axis=None, out=None, keepdims=NoValue, initial=NoValue, where=NoValue):
    raise NotImlementedError

def angle(z, deg=False):
    raise NotImlementedError

def any(a, axis=None, out=None, keepdims=NoValue, *, where=NoValue):
    raise NotImlementedError

def append(arr, values, axis=None):
    raise NotImlementedError

def apply_along_axis(func1d, axis, arr, *args, **kwargs):
    raise NotImlementedError

def apply_over_axes(func, a, axes):
    raise NotImlementedError

def argmax(a, axis=None, out=None):
    raise NotImlementedError

def argmin(a, axis=None, out=None):
    raise NotImlementedError

def argpartition(a, kth, axis=-1, kind='introselect', order=None):
    raise NotImlementedError

def argsort(a, axis=-1, kind=None, order=None):
    raise NotImlementedError

def argwhere(a):
    raise NotImlementedError

def around(a, decimals=0, out=None):
    raise NotImlementedError

def array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=NoValue, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', *, legacy=None):
    raise NotImlementedError

def array_equal(a1, a2, equal_nan=False):
    raise NotImlementedError

def array_equiv(a1, a2):
    raise NotImlementedError

def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):
    raise NotImlementedError

def array_split(ary, indices_or_sections, axis=0):
    raise NotImlementedError

def array_str(a, max_line_width=None, precision=None, suppress_small=None):
    raise NotImlementedError

def asarray_chkfinite(a, dtype=None, order=None):
    raise NotImlementedError

def asfarray(a, dtype='numpy.float64'):
    raise NotImlementedError

def asmatrix(data, dtype=None):
    raise NotImlementedError

def asscalar(a):
    raise NotImlementedError

def atleast_1d(*arys):
    raise NotImlementedError

def atleast_2d(*arys):
    raise NotImlementedError

def atleast_3d(*arys):
    raise NotImlementedError

def average(a, axis=None, weights=None, returned=False):
    raise NotImlementedError

def bartlett(M):
    raise NotImlementedError

def base_repr(number, base=2, padding=0):
    raise NotImlementedError

def binary_repr(num, width=None):
    raise NotImlementedError

def bincount(x, weights=None, minlength=0):
    raise NotImlementedError

def blackman(M):
    raise NotImlementedError

def block(arrays):
    raise NotImlementedError

def bmat(obj, ldict=None, gdict=None):
    raise NotImlementedError

def broadcast_arrays(*args, subok=False):
    raise NotImlementedError

def broadcast_shapes(*args):
    raise NotImlementedError

def broadcast_to(array, shape, subok=False):
    raise NotImlementedError

def busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None):
    raise NotImlementedError

def busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None):
    raise NotImlementedError

def byte_bounds(a):
    raise NotImlementedError

def can_cast(from_, to, casting='safe'):
    raise NotImlementedError

def choose(a, choices, out=None, mode='raise'):
    raise NotImlementedError

def clip(a, a_min, a_max, out=None, **kwargs):
    raise NotImlementedError

def column_stack(tup):
    raise NotImlementedError

def common_type(*arrays):
    raise NotImlementedError

def compress(condition, a, axis=None, out=None):
    raise NotImlementedError


def convolve(a, v, mode='full'):
    raise NotImlementedError

def copy(a, order='K', subok=False):
    raise NotImlementedError

def copyto(dst, src, casting='same_kind', where=True):
    raise NotImlementedError


def correlate(a, v, mode='valid'):
    raise NotImlementedError

def count_nonzero(a, axis=None, *, keepdims=False):
    raise NotImlementedError

def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None, *, dtype=None):
    raise NotImlementedError

def cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None):
    raise NotImlementedError

def cumprod(a, axis=None, dtype=None, out=None):
    raise NotImlementedError

def cumproduct(*args, **kwargs):
    raise NotImlementedError

def cumsum(a, axis=None, dtype=None, out=None):
    raise NotImlementedError

def datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind'):
    raise NotImlementedError

def delete(arr, obj, axis=None):
    raise NotImlementedError

def deprecate(*args, **kwargs):
    raise NotImlementedError

def deprecate_with_doc(msg):
    raise NotImlementedError

def diag(v, k=0):
    raise NotImlementedError

def diag_indices(n, ndim=2):
    raise NotImlementedError

def diag_indices_from(arr):
    raise NotImlementedError

def diagflat(v, k=0):
    raise NotImlementedError

def diagonal(a, offset=0, axis1=0, axis2=1):
    raise NotImlementedError

def diff(a, n=1, axis=-1, prepend=NoValue, append=NoValue):
    raise NotImlementedError

def digitize(x, bins, right=False):
    raise NotImlementedError

def disp(mesg, device=None, linefeed=True):
    raise NotImlementedError

def dot(a, b, out=None):
    raise NotImlementedError

def dsplit(ary, indices_or_sections):
    raise NotImlementedError

def dstack(tup):
    raise NotImlementedError

def ediff1d(ary, to_end=None, to_begin=None):
    raise NotImlementedError

def einsum(*operands, out=None, optimize=False, **kwargs):
    raise NotImlementedError

def einsum_path(*operands, optimize='greedy', einsum_call=False):
    raise NotImlementedError


def expand_dims(a, axis):
    raise NotImlementedError

def extract(condition, arr):
    raise NotImlementedError

def eye(N, M=None, k=0, dtype=float, order='C', *, like=None):
    raise NotImlementedError

def fill_diagonal(a, val, wrap=False):
    raise NotImlementedError

def find_common_type(array_types, scalar_types):
    raise NotImlementedError

def fix(x, out=None):
    raise NotImlementedError

def flatnonzero(a):
    raise NotImlementedError

def flip(m, axis=None):
    raise NotImlementedError

def fliplr(m):
    raise NotImlementedError

def flipud(m):
    raise NotImlementedError

def format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None, min_digits=None):
    raise NotImlementedError

def format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None, min_digits=None):
    raise NotImlementedError

def fromfunction(function, shape, *, dtype=float, like=None, **kwargs):
    raise NotImlementedError

def fromregex(file, regexp, dtype, encoding=None):
    raise NotImlementedError

def full(shape, fill_value, dtype=None, order='C', *, like=None):
    raise NotImlementedError

def full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None):
    raise NotImlementedError

def genfromtxt(fname, dtype=float, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=" !#$%&'()*+,-./:;<=>?@[\\]^{|}~", replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes', *, like=None):
    raise NotImlementedError

def geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0):
    raise NotImlementedError

def get_array_wrap(*args):
    raise NotImlementedError

def get_include():
    raise NotImlementedError

def get_printoptions():
    raise NotImlementedError

def getbufsize():
    raise NotImlementedError

def geterr():
    raise NotImlementedError

def geterrcall():
    raise NotImlementedError

def gradient(f, *varargs, axis=None, edge_order=1):
    raise NotImlementedError

def hamming(M):
    raise NotImlementedError

def hanning(M):
    raise NotImlementedError

def histogram(a, bins=10, range=None, normed=None, weights=None, density=None):
    raise NotImlementedError

def histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None):
    raise NotImlementedError

def histogram_bin_edges(a, bins=10, range=None, weights=None):
    raise NotImlementedError

def histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None):
    raise NotImlementedError

def hsplit(ary, indices_or_sections):
    raise NotImlementedError

def hstack(tup):
    raise NotImlementedError

def i0(x):
    raise NotImlementedError

def identity(n, dtype=None, *, like=None):
    raise NotImlementedError

def imag(val):
    raise NotImlementedError

def in1d(ar1, ar2, assume_unique=False, invert=False):
    raise NotImlementedError

def indices(dimensions, dtype=int, sparse=False):
    raise NotImlementedError

def inner(a, b):
    raise NotImlementedError

def insert(arr, obj, values, axis=None):
    raise NotImlementedError

def interp(x, xp, fp, left=None, right=None, period=None):
    raise NotImlementedError

def intersect1d(ar1, ar2, assume_unique=False, return_indices=False):
    raise NotImlementedError

def is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None):
    raise NotImlementedError

def isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False):
    raise NotImlementedError

def iscomplex(x):
    raise NotImlementedError

def iscomplexobj(x):
    raise NotImlementedError

def isfortran(a):
    raise NotImlementedError

def isin(element, test_elements, assume_unique=False, invert=False):
    raise NotImlementedError

def isneginf(x, out=None):
    raise NotImlementedError

def isposinf(x, out=None):
    raise NotImlementedError

def isreal(x):
    raise NotImlementedError

def isrealobj(x):
    raise NotImlementedError

def isscalar(element):
    raise NotImlementedError

def issctype(rep):
    raise NotImlementedError

def issubclass_(arg1, arg2):
    raise NotImlementedError

def issubdtype(arg1, arg2):
    raise NotImlementedError

def issubsctype(arg1, arg2):
    raise NotImlementedError

def iterable(y):
    raise NotImlementedError

def ix_(*args):
    raise NotImlementedError

def kaiser(M, beta):
    raise NotImlementedError

def kron(a, b):
    raise NotImlementedError

def lexsort(keys, axis=-1):
    raise NotImlementedError


def load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII'):
    raise NotImlementedError

def loads(*args, **kwargs):
    raise NotImlementedError

def loadtxt(fname, dtype=float, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, like=None):
    raise NotImlementedError

def logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0):
    raise NotImlementedError

def lookfor(what, module=None, import_modules=True, regenerate=False, output=None):
    raise NotImlementedError

def mafromtxt(fname, **kwargs):
    raise NotImlementedError

def mask_indices(n, mask_func, k=0):
    raise NotImlementedError

def asmatrix(data, dtype=None):
    raise NotImlementedError

def amax(a, axis=None, out=None, keepdims=NoValue, initial=NoValue, where=NoValue):
    raise NotImlementedError

def maximum_sctype(t):
    raise NotImlementedError

def may_share_memory(a, b, max_work=None):
    raise NotImlementedError

def mean(a, axis=None, dtype=None, out=None, keepdims=NoValue, *, where=NoValue):
    raise NotImlementedError

def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
    raise NotImlementedError

def meshgrid(*xi, copy=True, sparse=False, indexing='xy'):
    raise NotImlementedError

def amin(a, axis=None, out=None, keepdims=NoValue, initial=NoValue, where=NoValue):
    raise NotImlementedError

def min_scalar_type(a):
    raise NotImlementedError

def mintypecode(typechars, typeset='GDFgdf', default='d'):
    raise NotImlementedError

def moveaxis(a, source, destination):
    raise NotImlementedError

def msort(a):
    raise NotImlementedError

def nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None):
    raise NotImlementedError

def nanargmax(a, axis=None):
    raise NotImlementedError

def nanargmin(a, axis=None):
    raise NotImlementedError

def nancumprod(a, axis=None, dtype=None, out=None):
    raise NotImlementedError

def nancumsum(a, axis=None, dtype=None, out=None):
    raise NotImlementedError

def nanmax(a, axis=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def nanmean(a, axis=None, dtype=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=NoValue):
    raise NotImlementedError

def nanmin(a, axis=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=NoValue):
    raise NotImlementedError

def nanprod(a, axis=None, dtype=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=NoValue):
    raise NotImlementedError

def nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=NoValue):
    raise NotImlementedError

def nansum(a, axis=None, dtype=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=NoValue):
    raise NotImlementedError

def ndfromtxt(fname, **kwargs):
    raise NotImlementedError

def ndim(a):
    raise NotImlementedError

def nonzero(a):
    raise NotImlementedError

def obj2sctype(rep, default=None):
    raise NotImlementedError

def ones(shape, dtype=None, order='C', *, like=None):
    raise NotImlementedError

def ones_like(a, dtype=None, order='K', subok=True, shape=None):
    raise NotImlementedError

def outer(a, b, out=None):
    raise NotImlementedError

def packbits(a, axis=None, bitorder='big'):
    raise NotImlementedError

def pad(array, pad_width, mode='constant', **kwargs):
    raise NotImlementedError

def partition(a, kth, axis=-1, kind='introselect', order=None):
    raise NotImlementedError

def percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False):
    raise NotImlementedError

def piecewise(x, condlist, funclist, *args, **kw):
    raise NotImlementedError

def place(arr, mask, vals):
    raise NotImlementedError

def poly(seq_of_zeros):
    raise NotImlementedError

def polyadd(a1, a2):
    raise NotImlementedError

def polyder(p, m=1):
    raise NotImlementedError

def polydiv(u, v):
    raise NotImlementedError

def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):
    raise NotImlementedError

def polyint(p, m=1, k=None):
    raise NotImlementedError

def polymul(a1, a2):
    raise NotImlementedError

def polysub(a1, a2):
    raise NotImlementedError

def polyval(p, x):
    raise NotImlementedError

def printoptions(*args, **kwargs):
    raise NotImlementedError

def product(*args, **kwargs):
    raise NotImlementedError

def ptp(a, axis=None, out=None, keepdims=NoValue):
    raise NotImlementedError

def put(a, ind, v, mode='raise'):
    raise NotImlementedError

def put_along_axis(arr, indices, values, axis):
    raise NotImlementedError

def putmask(a, mask, values):
    raise NotImlementedError

def quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False):
    raise NotImlementedError

def ravel(a, order='C'):
    raise NotImlementedError

def ravel_multi_index(multi_index, dims, mode='raise', order='C'):
    raise NotImlementedError

def real(val):
    raise NotImlementedError

def real_if_close(a, tol=100):
    raise NotImlementedError

def recfromcsv(fname, **kwargs):
    raise NotImlementedError

def recfromtxt(fname, **kwargs):
    raise NotImlementedError

def repeat(a, repeats, axis=None):
    raise NotImlementedError

def require(a, dtype=None, requirements=None, *, like=None):
    raise NotImlementedError

def reshape(a, newshape, order='C'):
    raise NotImlementedError

def resize(a, new_shape):
    raise NotImlementedError

def result_type(*arrays_and_dtypes):
    raise NotImlementedError

def roll(a, shift, axis=None):
    raise NotImlementedError

def rollaxis(a, axis, start=0):
    raise NotImlementedError

def roots(p):
    raise NotImlementedError

def rot90(m, k=1, axes=(0, 1)):
    raise NotImlementedError

def round_(a, decimals=0, out=None):
    raise NotImlementedError

def round_(a, decimals=0, out=None):
    raise NotImlementedError

def vstack(tup):
    raise NotImlementedError

def safe_eval(source):
    raise NotImlementedError

def save(file, arr, allow_pickle=True, fix_imports=True):
    raise NotImlementedError

def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# ', encoding=None):
    raise NotImlementedError

def savez(file, *args, **kwds):
    raise NotImlementedError

def savez_compressed(file, *args, **kwds):
    raise NotImlementedError

def sctype2char(sctype):
    raise NotImlementedError

def searchsorted(a, v, side='left', sorter=None):
    raise NotImlementedError

def select(condlist, choicelist, default=0):
    raise NotImlementedError

def set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, *, legacy=None):
    raise NotImlementedError

def set_string_function(f, repr=True):
    raise NotImlementedError

def setbufsize(size):
    raise NotImlementedError

def setdiff1d(ar1, ar2, assume_unique=False):
    raise NotImlementedError

def seterr(all=None, divide=None, over=None, under=None, invalid=None):
    raise NotImlementedError

def seterrcall(func):
    raise NotImlementedError

def setxor1d(ar1, ar2, assume_unique=False):
    raise NotImlementedError

def shape(a):
    raise NotImlementedError

def shares_memory(a, b, max_work=None):
    raise NotImlementedError

def show():
    raise NotImlementedError

def sinc(x):
    raise NotImlementedError

def size(a, axis=None):
    raise NotImlementedError

def sometrue(*args, **kwargs):
    raise NotImlementedError

def sort(a, axis=-1, kind=None, order=None):
    raise NotImlementedError

def sort_complex(a):
    raise NotImlementedError

def split(ary, indices_or_sections, axis=0):
    raise NotImlementedError

def squeeze(a, axis=None):
    raise NotImlementedError

def stack(arrays, axis=0, out=None):
    raise NotImlementedError

def std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=NoValue, *, where=NoValue):
    raise NotImlementedError

def sum(a, axis=None, dtype=None, out=None, keepdims=NoValue, initial=NoValue, where=NoValue):
    raise NotImlementedError

def swapaxes(a, axis1, axis2):
    raise NotImlementedError

def take(a, indices, axis=None, out=None, mode='raise'):
    raise NotImlementedError

def take_along_axis(arr, indices, axis):
    raise NotImlementedError

def tensordot(a, b, axes=2):
    raise NotImlementedError

def tile(A, reps):
    raise NotImlementedError

def trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None):
    raise NotImlementedError

def transpose(a, axes=None):
    raise NotImlementedError

def trapz(y, x=None, dx=1.0, axis=-1):
    raise NotImlementedError

def tri(N, M=None, k=0, dtype=float, *, like=None):
    raise NotImlementedError

def tril(m, k=0):
    raise NotImlementedError

def tril_indices(n, k=0, m=None):
    raise NotImlementedError

def tril_indices_from(arr, k=0):
    raise NotImlementedError

def trim_zeros(filt, trim='fb'):
    raise NotImlementedError

def triu(m, k=0):
    raise NotImlementedError

def triu_indices(n, k=0, m=None):
    raise NotImlementedError

def triu_indices_from(arr, k=0):
    raise NotImlementedError

def typename(char):
    raise NotImlementedError

def union1d(ar1, ar2):
    raise NotImlementedError

def unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None):
    raise NotImlementedError

def unpackbits(a, axis=None, count=None, bitorder='big'):
    raise NotImlementedError

def unravel_index(indices, shape, order='C'):
    raise NotImlementedError

def unwrap(p, discont=None, axis=-1, *, period=6.283185307179586):
    raise NotImlementedError

def vander(x, N=None, increasing=False):
    raise NotImlementedError

def var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=NoValue, *, where=NoValue):
    raise NotImlementedError

def vdot(a, b):
    raise NotImlementedError

def vsplit(ary, indices_or_sections):
    raise NotImlementedError

def vstack(tup):
    raise NotImlementedError

def where(condition, x, y):
    raise NotImlementedError

def who(vardict=None):
    raise NotImlementedError

def zeros_like(a, dtype=None, order='K', subok=True, shape=None):
    raise NotImlementedError


