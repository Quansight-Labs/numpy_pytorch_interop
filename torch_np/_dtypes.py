""" Define the supported dtypes and numpy <--> torch dtype mapping, define casting rules. 
"""

# TODO: 1. define torch_np dtypes, make this work without numpy.
#       2. mimic numpy's various aliases (np.half == np.float16, dtype='i8' etc)
#       3. convert from python types: np.ones(3, dtype=float) etc

import builtins
import torch

from ._detail import _scalar_types


__all__ = ['dtype', 'DType', 'typecodes', 'issubdtype']


# Define analogs of numpy dtypes supported by pytorch.


def dtype(arg):
    if arg is None:
        arg = _scalar_types.default_scalar_type
    return DType(arg)


def torch_dtype_from(dtype_arg):
    return dtype(dtype_arg).torch_dtype


class DType:
    def __init__(self, arg):
        # a pytorch object?
        if isinstance(arg, torch.dtype):
            sctype = _scalar_types._torch_dtypes[arg]
        elif isinstance(arg, torch.Tensor):
            sctype = _scalar_types._torch_dtypes[arg.dtype]
        # a scalar type?
        elif issubclass_(arg, _scalar_types.generic):
            sctype = arg
        # a dtype already?
        elif isinstance(arg, DType):
            sctype = arg._scalar_type
        # a has a right attribute?
        elif hasattr(arg, 'dtype'):
            sctype = arg.dtype._scalar_type
        else:
            sctype = _scalar_types.sctype_from_string(arg)
        self._scalar_type = sctype

    @property
    def name(self):
        return self._scalar_type.name

    @property
    def type(self):
        return self._scalar_type

    @property
    def typecode(self):
        return self._scalar_type.typecode

    def __eq__(self, other):
        if isinstance(other, DType):
            return self._scalar_type == other._scalar_type
        try:
            other_instance = DType(other)
        except TypeError:
            return False
        return self._scalar_type == other_instance._scalar_type

    @property
    def torch_dtype(self):
        return self._scalar_type.torch_dtype

    def __hash__(self):
        return hash(self._scalar_type.name)

    def __repr__(self):
        return f'dtype("{self.name}")'

    __str__ = __repr__

    @property
    def itemsize(self):
        elem = self.type(1)
        return elem.get().element_size()

    def __getstate__(self):
        return self._scalar_type

    def __setstate__(self, value):
        self._scalar_type = value


typecodes = {'All': 'efdFDBbhil?',
        'AllFloat': 'efdFD',
        'AllInteger': 'Bbhil',
        'Integer': 'bhil',
        'UnsignedInteger': 'B',
        'Float': 'efd',
        'Complex': 'FD',
}



# ### Defaults and dtype discovery

def default_int_type():
    return dtype(_scalar_types.default_int_type)


def default_float_type():
    return dtype(_scalar_types.default_float_type)


def default_complex_type():
    return dtype(_scalar_types.default_complex_type)


def is_floating(dtyp):
    dtyp = dtype(dtyp)
    return issubclass(dtyp.type, _scalar_types.floating)


def is_integer(dtyp):
    dtyp = dtype(dtyp)
    return issubclass(dtyp.type, _scalar_types.integer)


def get_default_dtype_for(dtyp):
    typ = dtype(dtyp).type
    if issubclass(typ, _scalar_types.integer):
        result = default_int_type()
    elif issubclass(typ, _scalar_types.floating):
        result = default_float_type()
    elif issubclass(typ, _scalar_types.complexfloating):
        result = default_complex_type()
    elif issubclass(typ, _scalar_types.bool_):
        result = dtype('bool')
    else:
        raise TypeError("dtype %s not understood." % dtyp)
    return result


def issubclass_(arg, klass):
    try:
        return issubclass(arg, klass)
    except TypeError:
        return False


def issubdtype(arg1, arg2):
    # cf https://github.com/numpy/numpy/blob/v1.24.0/numpy/core/numerictypes.py#L356-L420
    if not issubclass_(arg1, _scalar_types.generic):
        arg1 = dtype(arg1).type
    if not issubclass_(arg2, _scalar_types.generic):
        arg2 = dtype(arg2).type
    return issubclass(arg1, arg2)


# The casting below is defined *with dtypes only*, so no value-based casting!

# These two dicts are autogenerated with autogen/gen_dtypes.py,
# using numpy version 1.23.5.


_can_cast_dict = {
'no': {'float16': {'float16': True, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float32': {'float16': False, 'float32': True, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float64': {'float16': False, 'float32': False, 'float64': True, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex64': {'float16': False, 'float32': False, 'float64': False, 'complex64': True, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex128': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'uint8': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': True, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'int8': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': True, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'int16': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': True, 'int32': False, 'int64': False, 'bool_': False}, 'int32': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': True, 'int64': False, 'bool_': False}, 'int64': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': True, 'bool_': False}, 'bool_': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': True}},

'equiv': {'float16': {'float16': True, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float32': {'float16': False, 'float32': True, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float64': {'float16': False, 'float32': False, 'float64': True, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex64': {'float16': False, 'float32': False, 'float64': False, 'complex64': True, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex128': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'uint8': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': True, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'int8': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': True, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'int16': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': True, 'int32': False, 'int64': False, 'bool_': False}, 'int32': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': True, 'int64': False, 'bool_': False}, 'int64': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': True, 'bool_': False}, 'bool_': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': False, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': True}},

'safe': {'float16': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float32': {'float16': False, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float64': {'float16': False, 'float32': False, 'float64': True, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex64': {'float16': False, 'float32': False, 'float64': False, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex128': {'float16': False, 'float32': False, 'float64': False, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'uint8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': False, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int16': {'float16': False, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int32': {'float16': False, 'float32': False, 'float64': True, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': True, 'int64': True, 'bool_': False}, 'int64': {'float16': False, 'float32': False, 'float64': True, 'complex64': False, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': True, 'bool_': False}, 'bool_': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}},

'same_kind': {'float16': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float32': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'float64': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex64': {'float16': False, 'float32': False, 'float64': False, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'complex128': {'float16': False, 'float32': False, 'float64': False, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': False, 'int16': False, 'int32': False, 'int64': False, 'bool_': False}, 'uint8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int16': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int32': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'int64': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': False, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': False}, 'bool_': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}},

'unsafe': {'float16': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'float32': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'float64': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'complex64': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'complex128': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'uint8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'int8': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'int16': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'int32': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'int64': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}, 'bool_': {'float16': True, 'float32': True, 'float64': True, 'complex64': True, 'complex128': True, 'uint8': True, 'int8': True, 'int16': True, 'int32': True, 'int64': True, 'bool_': True}}
}


_result_type_dict = {
'float16': {'float16': 'float16', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'float16', 'int8': 'float16', 'int16': 'float32', 'int32': 'float64', 'int64': 'float64', 'bool_': 'float16'}, 
'float32': {'float16': 'float32', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'float32', 'int8': 'float32', 'int16': 'float32', 'int32': 'float64', 'int64': 'float64', 'bool_': 'float32'},
'float64': {'float16': 'float64', 'float32': 'float64', 'float64': 'float64', 'complex64': 'complex128', 'complex128': 'complex128', 'uint8': 'float64', 'int8': 'float64', 'int16': 'float64', 'int32': 'float64', 'int64': 'float64', 'bool_': 'float64'},
'complex64': {'float16': 'complex64', 'float32': 'complex64', 'float64': 'complex128', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'complex64', 'int8': 'complex64', 'int16': 'complex64', 'int32': 'complex128', 'int64': 'complex128', 'bool_': 'complex64'},
'complex128': {'float16': 'complex128', 'float32': 'complex128', 'float64': 'complex128', 'complex64': 'complex128', 'complex128': 'complex128', 'uint8': 'complex128', 'int8': 'complex128', 'int16': 'complex128', 'int32': 'complex128', 'int64': 'complex128', 'bool_': 'complex128'},
'uint8': {'float16': 'float16', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'uint8', 'int8': 'int16', 'int16': 'int16', 'int32': 'int32', 'int64': 'int64', 'bool_': 'uint8'},
'int8': {'float16': 'float16', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'int16', 'int8': 'int8', 'int16': 'int16', 'int32': 'int32', 'int64': 'int64', 'bool_': 'int8'},
'int16': {'float16': 'float32', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'int16', 'int8': 'int16', 'int16': 'int16', 'int32': 'int32', 'int64': 'int64', 'bool_': 'int16'},
'int32': {'float16': 'float64', 'float32': 'float64', 'float64': 'float64', 'complex64': 'complex128', 'complex128': 'complex128', 'uint8': 'int32', 'int8': 'int32', 'int16': 'int32', 'int32': 'int32', 'int64': 'int64', 'bool_': 'int32'},
'int64': {'float16': 'float64', 'float32': 'float64', 'float64': 'float64', 'complex64': 'complex128', 'complex128': 'complex128', 'uint8': 'int64', 'int8': 'int64', 'int16': 'int64', 'int32': 'int64', 'int64': 'int64', 'bool_': 'int64'},
'bool_': {'float16': 'float16', 'float32': 'float32', 'float64': 'float64', 'complex64': 'complex64', 'complex128': 'complex128', 'uint8': 'uint8', 'int8': 'int8', 'int16': 'int16', 'int32': 'int32', 'int64': 'int64', 'bool_': 'bool_'}}

########################## end autogenerated part

