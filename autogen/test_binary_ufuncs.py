# this file is autogenerated via gen_ufuncs.py
# do not edit manually!

import torch

import _util
from _ndarray import asarray_replacer_1

import numpy as np
import torch

from _binary_ufuncs import *


def test_add():
    np.testing.assert_allclose(np.add(0.5, 0.6),
                               add(0.5, 0.6), atol=1e-7)



def test_arctan2():
    np.testing.assert_allclose(np.arctan2(0.5, 0.6),
                               arctan2(0.5, 0.6), atol=1e-7)



def test_bitwise_and():
    np.testing.assert_allclose(np.bitwise_and(0.5, 0.6),
                               bitwise_and(0.5, 0.6), atol=1e-7)



def test_bitwise_or():
    np.testing.assert_allclose(np.bitwise_or(0.5, 0.6),
                               bitwise_or(0.5, 0.6), atol=1e-7)



def test_bitwise_xor():
    np.testing.assert_allclose(np.bitwise_xor(0.5, 0.6),
                               bitwise_xor(0.5, 0.6), atol=1e-7)



def test_copysign():
    np.testing.assert_allclose(np.copysign(0.5, 0.6),
                               copysign(0.5, 0.6), atol=1e-7)



def test_divide():
    np.testing.assert_allclose(np.divide(0.5, 0.6),
                               divide(0.5, 0.6), atol=1e-7)



def test_equal():
    np.testing.assert_allclose(np.equal(0.5, 0.6),
                               equal(0.5, 0.6), atol=1e-7)



def test_float_power():
    np.testing.assert_allclose(np.float_power(0.5, 0.6),
                               float_power(0.5, 0.6), atol=1e-7)



def test_floor_divide():
    np.testing.assert_allclose(np.floor_divide(0.5, 0.6),
                               floor_divide(0.5, 0.6), atol=1e-7)



def test_fmax():
    np.testing.assert_allclose(np.fmax(0.5, 0.6),
                               fmax(0.5, 0.6), atol=1e-7)



def test_fmin():
    np.testing.assert_allclose(np.fmin(0.5, 0.6),
                               fmin(0.5, 0.6), atol=1e-7)



def test_fmod():
    np.testing.assert_allclose(np.fmod(0.5, 0.6),
                               fmod(0.5, 0.6), atol=1e-7)



def test_gcd():
    np.testing.assert_allclose(np.gcd(0.5, 0.6),
                               gcd(0.5, 0.6), atol=1e-7)



def test_greater():
    np.testing.assert_allclose(np.greater(0.5, 0.6),
                               greater(0.5, 0.6), atol=1e-7)



def test_greater_equal():
    np.testing.assert_allclose(np.greater_equal(0.5, 0.6),
                               greater_equal(0.5, 0.6), atol=1e-7)



def test_heaviside():
    np.testing.assert_allclose(np.heaviside(0.5, 0.6),
                               heaviside(0.5, 0.6), atol=1e-7)



def test_hypot():
    np.testing.assert_allclose(np.hypot(0.5, 0.6),
                               hypot(0.5, 0.6), atol=1e-7)



def test_lcm():
    np.testing.assert_allclose(np.lcm(0.5, 0.6),
                               lcm(0.5, 0.6), atol=1e-7)



def test_ldexp():
    np.testing.assert_allclose(np.ldexp(0.5, 0.6),
                               ldexp(0.5, 0.6), atol=1e-7)



def test_left_shift():
    np.testing.assert_allclose(np.left_shift(0.5, 0.6),
                               left_shift(0.5, 0.6), atol=1e-7)



def test_less():
    np.testing.assert_allclose(np.less(0.5, 0.6),
                               less(0.5, 0.6), atol=1e-7)



def test_less_equal():
    np.testing.assert_allclose(np.less_equal(0.5, 0.6),
                               less_equal(0.5, 0.6), atol=1e-7)



def test_logaddexp():
    np.testing.assert_allclose(np.logaddexp(0.5, 0.6),
                               logaddexp(0.5, 0.6), atol=1e-7)



def test_logaddexp2():
    np.testing.assert_allclose(np.logaddexp2(0.5, 0.6),
                               logaddexp2(0.5, 0.6), atol=1e-7)



def test_logical_and():
    np.testing.assert_allclose(np.logical_and(0.5, 0.6),
                               logical_and(0.5, 0.6), atol=1e-7)



def test_logical_or():
    np.testing.assert_allclose(np.logical_or(0.5, 0.6),
                               logical_or(0.5, 0.6), atol=1e-7)



def test_logical_xor():
    np.testing.assert_allclose(np.logical_xor(0.5, 0.6),
                               logical_xor(0.5, 0.6), atol=1e-7)



def test_matmul():
    np.testing.assert_allclose(np.matmul(0.5, 0.6),
                               matmul(0.5, 0.6), atol=1e-7)



def test_maximum():
    np.testing.assert_allclose(np.maximum(0.5, 0.6),
                               maximum(0.5, 0.6), atol=1e-7)



def test_minimum():
    np.testing.assert_allclose(np.minimum(0.5, 0.6),
                               minimum(0.5, 0.6), atol=1e-7)



def test_remainder():
    np.testing.assert_allclose(np.remainder(0.5, 0.6),
                               remainder(0.5, 0.6), atol=1e-7)



def test_multiply():
    np.testing.assert_allclose(np.multiply(0.5, 0.6),
                               multiply(0.5, 0.6), atol=1e-7)



def test_nextafter():
    np.testing.assert_allclose(np.nextafter(0.5, 0.6),
                               nextafter(0.5, 0.6), atol=1e-7)



def test_not_equal():
    np.testing.assert_allclose(np.not_equal(0.5, 0.6),
                               not_equal(0.5, 0.6), atol=1e-7)



def test_power():
    np.testing.assert_allclose(np.power(0.5, 0.6),
                               power(0.5, 0.6), atol=1e-7)



def test_remainder():
    np.testing.assert_allclose(np.remainder(0.5, 0.6),
                               remainder(0.5, 0.6), atol=1e-7)



def test_right_shift():
    np.testing.assert_allclose(np.right_shift(0.5, 0.6),
                               right_shift(0.5, 0.6), atol=1e-7)



def test_subtract():
    np.testing.assert_allclose(np.subtract(0.5, 0.6),
                               subtract(0.5, 0.6), atol=1e-7)



def test_divide():
    np.testing.assert_allclose(np.divide(0.5, 0.6),
                               divide(0.5, 0.6), atol=1e-7)

